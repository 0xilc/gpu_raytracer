#version 460 core

out vec4 FragColor;
in vec2 fragPos;

uniform int u_ScreenWidth;
uniform int u_ScreenHeight;

struct BVHNode {
    vec3 minBounds;
    int leftChild;
    vec3 maxBounds;
    int rightChild;
    int primitiveIndex;
    float pad[3];
};

struct Primitive {
    vec4 vertexData[3];
    int materialId;          
    int type;
    float pad;
};

struct Material {
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec4 mirror;
	float phong_exponent;
	int isMirror;
	float pad[2];
};

layout(std140, binding = 1) uniform CameraData {
    vec4 u_Position;
    vec4 u_Front;
    vec4 u_Up;
    vec4 u_PlaneCenter;
};

layout(std430, binding = 2) buffer BVHBuffer {
    BVHNode BVHNodes[];
};

layout(std430, binding = 3) buffer Primitives {
    Primitive primitiveNodes[];
};

layout(std430, binding = 4) buffer Materials {
    Material materials[];
};

// Ray tracing utility structures
struct Ray
{
    vec3 origin;
    vec3 direction;
};

struct HitRecord
{
    vec3 hitPoint;
    vec3 normal;
    int materialId;
    double t;
};

bool sphereIntersect(Ray ray, Primitive sphere)
{
    vec3 oc = ray.origin - sphere.vertexData[0].xyz;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(oc, ray.direction);
    float c = dot(oc, oc) - 1.0;
    float discriminant = b * b - 4 * a * c;
    return (discriminant > 0);
}

bool Hit(Ray ray, Primitive primitive, out HitRecord hitRecord)
{
    // triangle
    if (primitive.type == 0)    
    {
        vec3 e1 = primitive.vertexData[1].xyz - primitive.vertexData[0].xyz;
        vec3 e2 = primitive.vertexData[2].xyz - primitive.vertexData[0].xyz;
        vec3 h = cross(ray.direction, e2);
        float a = dot(e1, h);
        if (a > -0.00001 && a < 0.00001)
            return false;
        float f = 1.0 / a;
        vec3 s = ray.origin - primitive.vertexData[0].xyz;
        float u = f * dot(s, h);
        if (u < 0.0 || u > 1.0)
            return false;
        vec3 q = cross(s, e1);
        float v = f * dot(ray.direction, q);
        if (v < 0.0 || u + v > 1.0)
            return false;
        float t = f * dot(e2, q);
        if (t > 0.00001)
        {
            hitRecord.hitPoint = ray.origin + ray.direction * t;
            hitRecord.normal = normalize(cross(e1, e2));
            hitRecord.materialId = primitive.materialId;
            hitRecord.t = t;
            return true;
        }
        return false;
    }
    // sphere
    else                        
    {
        vec3 center = primitive.vertexData[0].xyz;
        float radius = primitive.vertexData[1].x;
        vec3 oc = ray.origin - center;
        float a = dot(ray.direction, ray.direction);
        float b = dot(oc, ray.direction);
        float c = dot(oc, oc) - radius * radius;
        float discriminant = b * b - a * c;
        if (discriminant > 0)
        {
            float temp = (-b - sqrt(discriminant)) / a;
            if (temp < 0.00001)
                temp = (-b + sqrt(discriminant)) / a;
            if (temp > 0.00001)
            {
                hitRecord.t = temp;
                hitRecord.hitPoint = ray.origin + ray.direction * temp;
                hitRecord.normal = normalize(hitRecord.hitPoint - center);
                hitRecord.materialId = primitive.materialId;
                return true;
            }
        }
        return false;
    }
}

vec3 blinnPhong(Ray ray, HitRecord hitRecord)
{
    // calculates pixel color with a point light on 50 50 50 position and 100 100 100 color
    vec3 lightPos = vec3(50.0, 50.0, 50.0);
    vec3 lightColor = vec3(0.0, 0.0, 0.0);
    vec3 ambient = materials[hitRecord.materialId].ambient.rgb;
    vec3 diffuse = materials[hitRecord.materialId].diffuse.rgb;
    vec3 specular = materials[hitRecord.materialId].specular.rgb;
    float phong_exponent = materials[hitRecord.materialId].phong_exponent;
    vec3 N = hitRecord.normal;
    vec3 L = normalize(lightPos - hitRecord.hitPoint);
    vec3 V = normalize(ray.origin - hitRecord.hitPoint);
    vec3 H = normalize(L + V);
    float diffuseIntensity = max(dot(N, L), 0.0);
    float specularIntensity = pow(max(dot(N, H), 0.0), phong_exponent);
    vec3 ambientComponent = ambient;
    vec3 diffuseComponent = diffuse * diffuseIntensity;
    vec3 specularComponent = specular * specularIntensity;
    return specularComponent + diffuseComponent;
    // return ambientComponent + diffuseComponent + specularComponent;
}

void main() {
    // Generate a ray from the camera position to the current pixel
    vec3 right = normalize(cross(u_Front.xyz, u_Up.xyz));
    vec3 up = normalize(vec3(u_Up.xyz));
    vec2 uv = fragPos + vec2(-0.5, -0.5);
    vec2 distanceFromCenter = uv * vec2(u_ScreenWidth, u_ScreenHeight);
    vec3 screenPoint = u_PlaneCenter.xyz + right * distanceFromCenter.x + up * distanceFromCenter.y;
    Ray ray;
    ray.origin = u_Position.xyz;
    ray.direction = normalize(screenPoint - u_Position.xyz);
    
    vec3 color = vec3(0.0);
    HitRecord hitRecord;
    for(int i = 0; i < 10000; i++)
    {
        Primitive primitive = primitiveNodes[i];
        if (Hit(ray, primitive, hitRecord))
        {
            color = blinnPhong(ray, hitRecord);
        }
    }

    FragColor = vec4(color, 1.0);
}